/*!
@file

Opdracht 3 DSB practicum. Werk deze opdracht verder uit aan de hand van het kommentaar.
Assignment 3 DSB practical. Elaborate this assignment on the basis of the comments.

@version $Rev: 4067 $
@author $Author: ewout $

@copyright Copyright 2006-2021 ir drs E.J Boks, Hogeschool van Arnhem en Nijmegen. https://ese.han.nl

$Id: signaal.cpp 4067 2021-01-14 17:10:15Z ewout $
************************************************************************/

// -*- C++ -*- generated by wxGlade 0.4 on Fri Feb 16 10:31:09 2007
// -*- C++ -*- generated by wxGlade 0.6.3 on Sun Feb  1 15:31:48 2009

#include <desktopApp.h>
#include <grafiekVenster.h>

#include "signaal.h"

#include <wx/filename.h>
#include <wx/wfstream.h>
#include <wx/txtstrm.h>
#include <dsbComplex.h>
#include <cmath>

#if (InterfaceTaalNederlands)
#error  "(signaal.cpp) Student naam en nummer moeten beneden in de velden worden ingevuld."
#elif defined (InterfaceTaalEnglish)

#endif
/********  Naam/name     :       Daniel Velicu        ******/
/********  Studentnummer :       586799        ******/

/* Dit is de functie die wordt aangeroepen wanneer de knop Tekenen wordt ingedrukt. Vul alle ontbrekende stukken in.
* This is the function that is called when the draw button is depressed. Fill in all void parts.  */
void SignaalVenster::tekenReeksHandler(wxCommandEvent &event)
{
	const UInt32 aantalSampPerPeriod = sampFreq / sigFreq;

	venster_statusbar->SetStatusText(_("FFTW start of calcation"));

	if (false == (aantalSampPerPeriod >1))
            wxLogError(_("The signal could not be sampled, because")+wxT(" \n")+
		           wxString::Format(_("the number of samples per period=%d"), aantalSampPerPeriod));
	else
	{
		PuntLijst punten; /* wxArray van wxPoints */
        PuntLijst ampPunten;
        PuntLijst phasePunten;
		if (SignaalType::DataBestand != sigKeuze)
		{
			const wxCoord ampl = 1024; //32768;   /* amplitude = 80% van scherm */
			const double hoekFreq = 2 * Pi*sigFreq / sampFreq;
			auto normHoek = 0.0;
            int n = 0;
            double delta = 2 * ampl / Pi * hoekFreq;
            double buffer = 0;

			UInt32 stap = 0;

			signaal.Clear();
			/* bereken */
			for (auto hoek = 0.0; hoek<2 * Pi*aantalPerioden; hoek += hoekFreq)
			{

				auto sigWaarde = 0.0f;

				/*  */
				/* Evaluate the signal type and fill in the appropriate signal form */
				switch (sigKeuze)
				{
					/* */
					/* Complete all required switch case statements here. */
                        /* Student part*/
						/* The remaining case statements are listed from here.  */

                    case SignaalType::Cosine:
                        sigWaarde = ampl * cos(hoek);
                        break;

                    case SignaalType::SquareWave:
                        if (cos(hoek) >= 0)
                        {
                            sigWaarde = ampl;
                        }
                        else{
                            sigWaarde = -ampl;
                        }
                        break;

                    case SignaalType::Triangle:
                        if (cos(hoek)>=0)
                        {
                            buffer += delta;
                        }else{
                            buffer -= delta;
                        }
                        sigWaarde = buffer;
                        wxLogDebug(wxString::Format(wxT("%f: %f"), sin(hoek), sigWaarde));
                        break;

					case SignaalType::DataBestand:
						sigWaarde = -1.234f;
						wxFAIL_MSG(_("Not allowed."));
						break;

					default:
						wxFAIL_MSG(wxString::Format(_("(SignaalVenster::tekenReeksHandler) Wrong signal choice (%ld)."),
						                            static_cast<UInt32>(sigKeuze)));
						return;
						break;
				}
				signaal.Add(sigWaarde);
				punten.Add(wxPoint(stap++, static_cast<int>(sigWaarde)));


			}
			signaal.Shrink();
		}
		else
		{
			if (0 == signaal.GetCount())
			{
				wxLogError(_("No valid data present in the file!"));
				return;
			}
			else
			{
				for (auto i = 0; i<signaal.GetCount(); i++)
					punten.Add(wxPoint(i, static_cast<int>(100 * signaal[i])));

			}
		}

		wxLogDebug(_("Number of values=%d"), static_cast<UInt32>(signaal.GetCount()));

		/*  veeg tijddomein schoon.
		 *  wipe clean the time domain.  */
		signaalGrafiek->maakSchoon();
		/* teken het tijddomeinbeeld met gebruik van autoschaling.
		 * draw the time domain image using auto scaling. */
		signaalGrafiek->tekenStaven(punten, true);

		/* English : Add the code here to calculate the FFT and to draw the frequency image in fftw Graph.
		* tips:
		* 1) use the r2c plan and the FFTW_PRESERVE_INPUT + FFTW_ESTIMATE flags in the calculation.
		* 2) use the Complex and Polar classes from assignment 1.
		* 3) In the phase calculation, force the phase to zero as the size of the complex number <phaseTone Border(see the constructor of this class).
		* 4) for info about the readout of the amplitude and phase checkboxes, see http ://docs.wxwidgets.org/3.0/classwx_check_box.html
        * student part starts here */
        const auto size = signaal.GetCount();

        fftw_complex* output = fftw_alloc_complex(size / 2 + 1);

        fftw_plan p = fftw_plan_dft_r2c_1d(size, &(signaal[0]), output, FFTW_PRESERVE_INPUT + FFTW_ESTIMATE); //Used r2c plan and FFTW_PRESERVE_INPUT + FFTW_ESTIMATE

        fftw_execute(p);
        fftw_destroy_plan(p);
        fftw_cleanup();

        ampPunten.Clear();
        phasePunten.Clear();

        for (int i = 0; i < (size / 2 + 1); i++)
        {
            const Complex buffer((float)output[i][0], (float)output[i][1]); //Used complex buffer

            ampPunten.Add(wxPoint(i, 100 * buffer.Mag()));
            ampPunten.Add(wxPoint(-i, 100 * buffer.Mag()));

            if ((double)buffer.Mag() < faseToonGrens)
            {
                phasePunten.Add(wxPoint(i, 0));
                phasePunten.Add(wxPoint(-i, 0));
            }
            else
            {
                phasePunten.Add(wxPoint(i, 100 * buffer.Arg()));
                phasePunten.Add(wxPoint(-i, 100 * buffer.Arg()));
            }

            if (dumpFreqDomeinCheckBox->IsChecked())
            {
                wxLogMessage(wxT("FFT[%i] = Re = %f, Im = %f, |%f|/%f"), i, buffer.Re(), buffer.Im(), buffer.Mag(), buffer.Arg());
            }

        }
        ampPunten.Shrink();
        phasePunten.Shrink();

        fftwGrafiek->maakSchoon();
        fftwGrafiek->zetTekenPen(assenPen);
        fftwGrafiek->tekenAssenstelsel();

        if (ampCheckBox->IsChecked())
        {
            fftwGrafiek->zetTekenPen(ampPen);
            fftwGrafiek->tekenStaven(ampPunten, true);
        }
        if (faseCheckBox->IsChecked())
        {
            fftwGrafiek->zetTekenPen(fasePen);
            fftwGrafiek->tekenStaven(phasePunten, true);
        }
        fftw_free(output);

		venster_statusbar->SetStatusText(_("Frequency image was constructed."));
	}

}


/*********** Geachte studenten , hieronder NIETS veranderen.              ******/
/*********** Honoured students, do NOT alter anything below this line.  ******/

SignaalVenster::SignaalVenster(wxWindow* parent,
                               int id,
                               const wxString& title,
                               const wxPoint& pos,
                               const wxSize& size,
                               long style) : wxFrame(parent,
                                                     id,
                                                     title,
                                                     pos,
                                                     size,
                                                     (wxDEFAULT_DIALOG_STYLE|wxMINIMIZE_BOX|wxMAXIMIZE_BOX|
                                                      wxSYSTEM_MENU| wxRESIZE_BORDER | wxCAPTION|
                                                      wxFULL_REPAINT_ON_RESIZE)),
                                             signaalPen(wxPen(wxColour(wxT("BLUE")), 2, wxPENSTYLE_SOLID)),
                                             ampPen(wxPen(wxColour(wxT("GREEN")), 2, wxPENSTYLE_SOLID)),
                                             fasePen(wxPen(wxColour(wxT("RED")), 2, wxPENSTYLE_SOLID)),
                                             assenPen(wxPen(wxColour(wxT("BLACK")), 1, wxPENSTYLE_DOT_DASH))
{
    // begin wxGlade: SignaalVenster::SignaalVenster
    SetSize(wxSize(1245, 977));
    hoofdPaneel = new wxPanel(this, wxID_ANY);
    tijdPaneel = new wxScrolledWindow(hoofdPaneel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxBORDER_RAISED|wxTAB_TRAVERSAL);
    freqPaneel = new wxScrolledWindow(hoofdPaneel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    venster_menubar = new wxMenuBar();
    wxMenu *wxglade_tmp_menu;
    wxglade_tmp_menu = new wxMenu();
    wxglade_tmp_menu->Append(wxID_ABOUT, _("&About"), wxEmptyString);
    Bind(wxEVT_MENU, &SignaalVenster::aboutHandler, this, wxID_ABOUT);
    wxglade_tmp_menu->Append(TekenGrafiekID, _("&Execute FFT\tCtrl+T"), wxEmptyString);
    Bind(wxEVT_MENU, &SignaalVenster::tekenReeksHandler, this, TekenGrafiekID);
    wxglade_tmp_menu->Append(ExportTijdID, _("Export the time domain image\tCtrl+R"), wxEmptyString);
    Bind(wxEVT_MENU, &SignaalVenster::slaOpTijdBeeldHandler, this, ExportTijdID);
    wxglade_tmp_menu->Append(ExportFreqID, _("Export the frequency domain image\tCtrl+E"), wxEmptyString);
    Bind(wxEVT_MENU, &SignaalVenster::slaOpFreqBeeldHandler, this, ExportFreqID);
    wxglade_tmp_menu->Append(wxID_EXIT, _("Quit\tCtrl+Q"), wxEmptyString);
    Bind(wxEVT_MENU, &SignaalVenster::eindeHandler, this, wxID_EXIT);
    venster_menubar->Append(wxglade_tmp_menu, _("Bestand"));
    SetMenuBar(venster_menubar);
    venster_statusbar = CreateStatusBar(1);
    fftwGrafiek = new GrafiekVenster(freqPaneel, wxID_ANY, wxSize(GrafiekBreedte,GrafiekHoogte));
    static_line_1 = new wxStaticLine(hoofdPaneel, wxID_ANY);
    signaalGrafiek = new GrafiekVenster(tijdPaneel, wxID_ANY, wxSize(GrafiekBreedte,GrafiekHoogte));
    signaalFrequentieLabel = new wxStaticText(hoofdPaneel, wxID_ANY, _("Signal frequency"));
    sigFreqCtrl = new wxSpinCtrl(hoofdPaneel, SignaalFrequentieID, wxT("40"), wxDefaultPosition, wxDefaultSize, 0, 1, 1000);
    static_line_2 = new wxStaticLine(hoofdPaneel, wxID_ANY);
    sampleFreqLabel = new wxStaticText(hoofdPaneel, wxID_ANY, _("Sampling frequency"));
    sampFreqCtrl = new wxSpinCtrl(hoofdPaneel, SampleFreqID, wxT("250"), wxDefaultPosition, wxDefaultSize, wxSP_WRAP, 1, 10000);
    const wxString signaalKeuze_choices[] = {
        _("Cosine"),
        _("Triangle"),
        _("Square"),
        _("Data from file"),
    };
    signaalKeuze = new wxChoice(hoofdPaneel, SignaalKeuzeID, wxDefaultPosition, wxDefaultSize, 4, signaalKeuze_choices);
    aantalPeriodenLabel = new wxStaticText(hoofdPaneel, wxID_ANY, _("Number of periods:"));
    aantalPeriodenCtrl = new wxSpinCtrl(hoofdPaneel, AantalPeriodenID, wxT("3"), wxDefaultPosition, wxDefaultSize, 0, 1, 10);
    ampCheckBox = new wxCheckBox(hoofdPaneel, TekenAmpID, _("Show amplitude"));
    faseCheckBox = new wxCheckBox(hoofdPaneel, TekenFaseID, _("Show phase"));
    dumpFreqDomeinCheckBox = new wxCheckBox(hoofdPaneel, DumpFreqDomeinID, _("Dump FFT values"));
    tekenButton = new wxButton(hoofdPaneel, TekenGrafiekID, _("Execute Fast Fourier Transform"));
    eindeKnop = new wxButton(hoofdPaneel, wxID_EXIT, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade

	//    const wxSize fftwGrootte = fftwGrafiek->geefTekenVeldGrootte();
	const wxSize sigGrootte = signaalGrafiek->geefTekenVeldGrootte();

	fftwGrafiek->zetOorsprongMidden();
	fftwGrafiek->zetGroteTekst(_("Demo version"),wxPoint(-375,sigGrootte.GetHeight()/2));

	signaalGrafiek->zetTekenPen(signaalPen);
	signaalGrafiek->zetOorsprong(wxPoint(0,sigGrootte.GetHeight()/2));

	signaalGrafiek->zetGroteTekst(_("Demo version"),wxPoint(25,sigGrootte.GetHeight()/2));

	signaalConfig = reinterpret_cast<wxConfig *>(wxConfigBase::Get(false));    /* verkrijg de globale config pointer */

	signaalConfig->SetPath(wxT("/Configuratie/Signaal"));

	int leeswaarde;
	signaalConfig->Read(wxT("Sampling_Frequentie"),&leeswaarde,240);
	sampFreq = leeswaarde;
	signaalConfig->Read(wxT("Signaal_Frequentie"),&leeswaarde,40);
	sigFreq = leeswaarde;
	signaalConfig->Read(wxT("AantalPerioden"),&leeswaarde,10);
	aantalPerioden = leeswaarde;
	signaalConfig->Read(wxT("SignaalKeuze"),&leeswaarde,0);
	sigKeuze = static_cast<SignaalType>(leeswaarde);
	signaalKeuze->SetSelection(leeswaarde);

	signaalConfig->Read(wxT("DataPad"),&dataPad,wxGetHomeDir());

	signaalConfig->Read(wxT("DumpFFTKeuze"),&leeswaarde,0);
	dumpFreqDomeinCheckBox->SetValue((0==leeswaarde) ? false : true);

	sampFreqCtrl->SetValue(sampFreq);
	sigFreqCtrl->SetValue(sigFreq);
	aantalPeriodenCtrl->SetValue(aantalPerioden);


	bool vink;
	signaalConfig->Read(wxT("FaseTekenen"),&vink);
	faseCheckBox->SetValue(vink);

	signaalConfig->Read(wxT("AmplitudeTekenen"),&vink);
	ampCheckBox->SetValue(vink);
}


SignaalVenster::~SignaalVenster()
{
	wxGetApp().bewaarHoofdVensterGrootte();

	/* Initialiseer de configuratie */
	/* lees filter voorkeurswaarden in */
	signaalConfig->SetPath(wxT("/Configuratie/Signaal"));
	signaalConfig->Write(wxT("Sampling_Frequentie"),sampFreq);
	signaalConfig->Write(wxT("Signaal_Frequentie"),sigFreq);
	signaalConfig->Write(wxT("AantalPerioden"),aantalPerioden);
	signaalConfig->Write(wxT("SignaalKeuze"),static_cast<int>(sigKeuze));
	signaalConfig->Write(wxT("DataPad"),dataPad);
	signaalConfig->Write(wxT("FaseTekenen"),faseCheckBox->IsChecked());
	signaalConfig->Write(wxT("AmplitudeTekenen"),ampCheckBox->IsChecked());

	signaalConfig->Write(wxT("DumpFFTKeuze"),dumpFreqDomeinCheckBox->IsChecked());
}

BEGIN_EVENT_TABLE(SignaalVenster, wxFrame)
    // begin wxGlade: SignaalVenster::event_table
    EVT_SPINCTRL(SignaalFrequentieID, SignaalVenster::freqHandler)
    EVT_SPINCTRL(SampleFreqID, SignaalVenster::sampFreqHandler)
    EVT_CHOICE(SignaalKeuzeID, SignaalVenster::sigKeuzeHandler)
    EVT_SPINCTRL(AantalPeriodenID, SignaalVenster::periodeHandler)
    EVT_BUTTON(TekenGrafiekID, SignaalVenster::tekenReeksHandler)
    EVT_BUTTON(wxID_EXIT, SignaalVenster::eindeHandler)
    // end wxGlade

				EVT_TEXT(SignaalFrequentieID, SignaalVenster::freqTextHandler)
				EVT_TEXT(SampleFreqID, SignaalVenster::sampFreqTextHandler)

				EVT_UPDATE_UI(TekenGrafiekID, SignaalVenster::magTekenenHandler )
				EVT_UPDATE_UI(SampleFreqID, SignaalVenster::dataBestandGebruiktHandler )
				EVT_UPDATE_UI(SignaalFrequentieID, SignaalVenster::dataBestandGebruiktHandler )
				EVT_UPDATE_UI(AantalPeriodenID, SignaalVenster::dataBestandGebruiktHandler )


END_EVENT_TABLE();

void SignaalVenster::eindeHandler(wxCommandEvent &event)
{
	Close();
}

void SignaalVenster::magTekenenHandler(wxUpdateUIEvent &event)
{
	auto ampCheck = (wxCheckBox *)FindWindowById(TekenAmpID,this);
	auto faseCheck = (wxCheckBox *)FindWindowById(TekenFaseID,this);

	const bool erWordtGetekend = ((true==ampCheck->IsChecked()) || (true==faseCheck->IsChecked()));
	event.Enable((true==erWordtGetekend) && ((SignaalType::DataBestand != sigKeuze) || (0 != signaal.GetCount())));
}

void SignaalVenster::dataBestandGebruiktHandler(wxUpdateUIEvent &event)
{
	event.Enable((SignaalType::DataBestand != sigKeuze));
}

void SignaalVenster::periodeHandler(wxSpinEvent &event) // wxGlade: <event_handler>
{
	wxSpinCtrl const * const aantalCtrl = (wxSpinCtrl *)FindWindowById(AantalPeriodenID,this);

	aantalPerioden = static_cast<UInt32 >(aantalCtrl->GetValue());
}

void SignaalVenster::sampFreqHandler(wxSpinEvent &event) // wxGlade: <event_handler>
{
	wxSpinCtrl const * const sampCtrl = (wxSpinCtrl *)FindWindowById(SampleFreqID,this);

	sampFreq = static_cast<UInt32 >(sampCtrl->GetValue());

}

void SignaalVenster::sampFreqTextHandler(wxCommandEvent &event)
{
	wxSpinCtrl const * const sampCtrl = (wxSpinCtrl *)FindWindowById(SampleFreqID,this);

	sampFreq = static_cast<UInt32 >(sampCtrl->GetValue());

}


void SignaalVenster::freqHandler(wxSpinEvent &event) // wxGlade: <event_handler>
{
	wxSpinCtrl const * const sigCtrl = (wxSpinCtrl *)FindWindowById(SignaalFrequentieID,this);

	sigFreq = static_cast<UInt32 >(sigCtrl->GetValue());

}

void SignaalVenster::freqTextHandler(wxCommandEvent &event)
{
	wxSpinCtrl const * const sigCtrl = (wxSpinCtrl *)FindWindowById(SignaalFrequentieID,this);

	sigFreq = static_cast<UInt32 >(sigCtrl->GetValue());

}

void SignaalVenster::aboutHandler(wxCommandEvent &event)
{
	wxGetApp().geefCopyright(_("Assignment 3 DSB Practicum"),
	                         _("Employ the FFTW library for generating a frequency plot."));

}

// wxGlade: add SignaalVenster event handlers
void SignaalVenster::sigKeuzeHandler(wxCommandEvent &event)
{
	wxChoice const * const keuze = (wxChoice *)FindWindowById(SignaalKeuzeID,this);

	sigKeuze = static_cast<SignaalType>(keuze->GetSelection());

	if (SignaalType::DataBestand == sigKeuze)
	{
		wxFileName bestand(dataPad);
		wxFileDialog dialoog(this,
		                     _("Open a data file with the signal values in float format)"),
		                     bestand.GetPath(),
		                     bestand.GetFullName(),
		                     _("All files (*.*)|*.*"));


		if (wxID_OK == dialoog.ShowModal())
		{
			bestand = wxFileName(dataPad = dialoog.GetPath());

			const wxString naam(dialoog.GetPath());
			wxFileInputStream dataStroom(bestand.GetFullPath());

			if (true != dataStroom.IsOk())
			{
				const wxString fout(_("Could not open:") + bestand.GetFullName());
				wxLogError(fout);
			}
			else
			{
				wxTextInputStream stroom(dataStroom);
				/* maak de array leeg */
				signaal.Empty();

				wxString getal(stroom.ReadLine());

				/* lees de stroom uit en converteer naar double */
				while (getal != wxEmptyString)
				{
					double waarde;
					//wxLogDebug(wxT("getal=")+getal);
					if (false == getal.ToDouble(&waarde))
					{
						/* vervang door , door .  */

						/* mogelijk locale waar komma wordt verwacht */
						/* vervang in de gehele string */
						getal.Replace(wxT(","),wxT("."),true);
						if (false == getal.ToDouble(&waarde))
						{
							wxLogError(_("Error reading the float data."));
							signaal.Clear();
							return;
						}
					}
					//   wxLogDebug(wxString::Format(wxT("waarde = %lf"),waarde));
					signaal.Add(waarde);

					getal = stroom.ReadLine();
				}

				signaal.Shrink(); /* geef all niet gebruikte geheugen terug */

			}
		}
	}

	//wxLogDebug(wxString::Format(wxT("sigKeuze = %ld."),sigKeuze));
}

void SignaalVenster::slaOpTijdBeeldHandler(wxCommandEvent &event)
{
	signaalGrafiek->slaOpVeld();
}

void SignaalVenster::slaOpFreqBeeldHandler(wxCommandEvent &event)
{
	fftwGrafiek->slaOpVeld();
}

void SignaalVenster::set_properties()
{

    // begin wxGlade: SignaalVenster::set_properties
    SetTitle(_("Signal sampling and frequency image"));
    SetFont(wxFont(14, wxFONTFAMILY_DECORATIVE, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, 0, wxT("Helvetica")));
    int venster_statusbar_widths[] = { -1 };
    venster_statusbar->SetStatusWidths(1, venster_statusbar_widths);
    
    // statusbar fields
    const wxString venster_statusbar_fields[] = {
        _("FFTW Status : unknown"),
    };
    for(int i = 0; i < venster_statusbar->GetFieldsCount(); ++i) {
        venster_statusbar->SetStatusText(venster_statusbar_fields[i], i);
    }
    freqPaneel->SetScrollRate(10, 10);
    tijdPaneel->SetScrollRate(10, 10);
    sigFreqCtrl->SetValue(StandaardFreq);
    sampFreqCtrl->SetValue(StandaardSampFreq);
    signaalKeuze->SetSelection(0);
    aantalPeriodenCtrl->SetValue(StandaardPerioden);
    ampCheckBox->SetValue(1);
    hoofdPaneel->SetBackgroundColour(wxColour(255, 50, 37));
    // end wxGlade
}


void SignaalVenster::do_layout()
{
    // begin wxGlade: SignaalVenster::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* grafiekenSizer = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_3 = new wxStaticBoxSizer(new wxStaticBox(hoofdPaneel, wxID_ANY, _("Frequency plot features")), wxVERTICAL);
    wxStaticBoxSizer* sizer_5 = new wxStaticBoxSizer(new wxStaticBox(hoofdPaneel, wxID_ANY, _("Time domain properties")), wxVERTICAL);
    wxBoxSizer* sizer_3_copy_1 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* deelSizer = new wxStaticBoxSizer(new wxStaticBox(hoofdPaneel, wxID_ANY, _("Signal properties")), wxHORIZONTAL);
    wxBoxSizer* sizer_9 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_11 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_10 = new wxBoxSizer(wxVERTICAL);
    sizer_10->Add(fftwGrafiek, 1, wxEXPAND, 0);
    freqPaneel->SetSizer(sizer_10);
    grafiekenSizer->Add(freqPaneel, 1, wxEXPAND, 0);
    grafiekenSizer->Add(static_line_1, 0, wxBOTTOM|wxEXPAND|wxTOP, 5);
    sizer_11->Add(signaalGrafiek, 1, wxEXPAND, 0);
    tijdPaneel->SetSizer(sizer_11);
    grafiekenSizer->Add(tijdPaneel, 1, wxEXPAND, 0);
    sizer_8->Add(signaalFrequentieLabel, 0, wxLEFT|wxTOP, 5);
    sizer_8->Add(sigFreqCtrl, 0, wxALL, 5);
    deelSizer->Add(sizer_8, 1, wxEXPAND, 0);
    deelSizer->Add(static_line_2, 0, wxEXPAND, 0);
    sizer_9->Add(sampleFreqLabel, 0, wxLEFT|wxTOP, 5);
    sizer_9->Add(sampFreqCtrl, 0, wxALL, 5);
    deelSizer->Add(sizer_9, 1, wxEXPAND, 0);
    sizer_2->Add(deelSizer, 1, wxEXPAND, 0);
    sizer_5->Add(signaalKeuze, 0, wxALL|wxEXPAND, 5);
    sizer_3_copy_1->Add(aantalPeriodenLabel, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
    sizer_3_copy_1->Add(aantalPeriodenCtrl, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
    sizer_5->Add(sizer_3_copy_1, 0, wxALL|wxEXPAND, 5);
    sizer_2->Add(sizer_5, 1, wxEXPAND, 0);
    sizer_3->Add(ampCheckBox, 0, wxALL|wxEXPAND, 5);
    sizer_3->Add(faseCheckBox, 0, wxALL|wxEXPAND, 5);
    sizer_2->Add(sizer_3, 1, wxEXPAND, 0);
    grafiekenSizer->Add(sizer_2, 0, wxEXPAND, 0);
    sizer_4->Add(dumpFreqDomeinCheckBox, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);
    sizer_4->Add(tekenButton, 1, wxALL|wxEXPAND, 10);
    sizer_4->Add(eindeKnop, 0, wxALL|wxEXPAND, 10);
    grafiekenSizer->Add(sizer_4, 0, wxEXPAND, 0);
    hoofdPaneel->SetSizer(grafiekenSizer);
    sizer_1->Add(hoofdPaneel, 1, wxEXPAND, 0);
    SetSizer(sizer_1);
    sizer_1->SetSizeHints(this);
    Layout();
    Centre();
    // end wxGlade
}


double SignaalVenster::berekendB(const double lineair)
{
	//	wxASSERT(lineair > 0 );
	const auto uit = 20 * log10(fabs(lineair));
	return(uit);
};


double SignaalVenster::berekenLineair(const double decibel)
{
	const auto uit = pow(10, decibel / 20.0);
	return(uit);
}

/************* Applicatie ( de "main()" van deze GUI applikatie) ******/

IMPLEMENT_APP(SignaalApp)

SignaalApp::SignaalApp() : DesktopApp(_("FFT Signal test"))
{

}

bool SignaalApp::OnInit()
{
	wxImage::AddHandler(new wxPNGHandler);

	SignaalVenster * const venster = new SignaalVenster(NULL,
	                                                    wxID_ANY,
	                                                    wxT("Voorbeeld van een signaal"));

	zetHoofdVenster(venster);

	venster->Show();

	return(true);

}

